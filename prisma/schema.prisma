// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Webtoon {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  title       String
  description String?
  author      String
  coverImage  String?
  views       Int        @default(0)
  status      Status     @default(ONGOING)
  episodes    Episode[]
  genres      Genre[]    @relation("WebtoonToGenre")
  comments    Comment[]
  bookmarks   Bookmark[]
}

model Episode {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  number    Int
  title     String
  imageUrls String[]
  webtoon   Webtoon   @relation(fields: [webtoonId], references: [id], onDelete: Cascade)
  webtoonId String
  comments  Comment[]

  @@unique([webtoonId, number])
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String
  webtoon   Webtoon? @relation(fields: [webtoonId], references: [id], onDelete: Cascade)
  webtoonId String?
  episode   Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  episodeId String?
}

model Genre {
  id       String    @id @default(uuid())
  name     String    @unique
  webtoons Webtoon[] @relation("WebtoonToGenre")
}

model Bookmark {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String
  webtoon   Webtoon  @relation(fields: [webtoonId], references: [id], onDelete: Cascade)
  webtoonId String

  @@unique([accountId, webtoonId])
}

enum Status {
  ONGOING
  COMPLETED
  HIATUS
  DROPPED
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String     @id
  accountId             String
  providerId            String
  userId                String
  user                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  Comment               Comment[]
  Bookmark              Bookmark[]

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
